#!/bin/bash
#
# GRID-INIT
##
## Start/Stop Services
##
##		1. SGE Deamons
##
##		2. Keyless Login between Nodes
##
##		3. Mount Shared File Systems for Management & Job Execution
##	

##		TESTING
##				✅ check keychain creation  (mostly bug free on first pass)
##						** some issues with keychain-all .. check loop
##				-  check sshfs
##						** major issues with reading password from cached file
##		
##
##		TODO
##				- add benchmark function
##				- update help
##				- add uninstall (reverse actions of setup)
##				- package setup as a function?
##
# Define Function
# Start Relevant Services
function grid-agent_startservices(){
    # Configure Keychain Between All Nodes
    grid-agent_icebreaker
    # Mount SGE File Systems Across Network on All Nodes - Universal File Paths
    grid-agent_synchronize	    
    # Start SGE deamons
    grid-agent_sgedeamon
}
# Define Function
## Start SGE Deamons
function grid-agent_sgedeamon(){
    local node=''
    # Start SGE Master Deamon
    if [ ! -z "$(echo ${GRID_START} | grep -o 'engine')" ]; then
	echo -e "\nStarting Master Host: ${GRID_ADMIN}@${GRID_MASTER_NODE}"
	ssh ${GRID_ADMIN}'@'${GRID_MASTER_NODE} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && /opt/ogs/bin/darwin-x64/sge_qmaster && sleep 1; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && echo "!! HOST ERROR - sge_qmaster is not running - check environment and/or host config"; [ ! -z "${service}" ] && echo -e "✅  Master Host was started successfully - sge_qmaster is running with PID: ${service}"'
	for node in ${GRID_COMPUTE_NODES}; do
	    echo -e "\nWaking Worker Node: ${GRID_ADMIN}@${node}"
	    ssh ${GRID_ADMIN}'@'${node} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && /opt/ogs/bin/darwin-x64/sge_execd && sleep 1; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && echo "!! HOST ERROR - sge_execd is not running - check enviroment and/or host config"; [ ! -z "${service}" ] && echo -e "✅  Execution Host was started successfully - sge_execd is running with PID: ${service}"'
	done
    elif [ ! -z "$(echo ${GRID_STOP} | grep -o 'engine')" ]; then
	echo -e "\nStopping Master Host: ${GRID_ADMIN}@{GRID_MASTER_NODE}"
	ssh ${GRID_ADMIN}'@'${GRID_MASTER_NODE} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_qmaster")); [ ! -z "${service}" ] && pkill sge_qmaster && sleep 1; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && echo "⛔ QMaster Host:'${GRID_MASTER_NODE}' Has Shutdown"; [ ! -z "${service}" ] && echo -e "!! SHUTDOWN ERROR - sge_qmaster is still running with PID: ${service}"'
	for node in ${GRID_COMPUTE_NODES}; do
	    echo -e "\nClocking out Worker Node: ${GRID_ADMIN}@${node}"
	    ssh ${GRID_ADMIN}'@'${node} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && pkill sge_execd && sleep 1; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && echo "⛔ Execution Node:'${node}' Has Shutdown"; [ ! -z "${service}" ] && echo -e "!! SHUTDOWN ERROR - sge_execd is still running with PID: ${service}"'
	done
    fi
}
# Define Function
## Configure KEYCHAIN Between All Nodes
function grid-agent_icebreaker(){
    # Form trust from Master to All Nodes
    if [ ! -z "$(echo ${GRID_START} | grep -o 'keychain')" ]; then
	# Loop through each compute node
       	for node in ${GRID_COMPUTE_NODES}; do
	    grid-agent_keychain ${GRID_USER} ${node} ${GRID_MASTER_NODE}
	    [ ! -z "${GRID_ADMIN}" ] || [ "${GRID_ADMIN}" != "${GRID_USER}" ] && grid-agent_keychain ${GRID_ADMIN} ${node} ${GRID_MASTER_NODE}
	done
    elif [ ! -z "$(echo ${GRID_STOP} | grep -o 'keychain')" ]; then
	# Loop through each compute node
	for node in ${GRID_COMPUTE_NODES}; do
	    echo ${node}
	    grid-agent_keychain ${GRID_USER} ${node} ${GRID_MASTER_NODE} '--reset'
	    [ ! -z "${GRID_ADMIN}" ] || [ "${GRID_ADMIN}" != "${GRID_USER}" ] && grid-agent_keychain ${GRID_ADMIN} ${node} ${GRID_MASTER_NODE} '--reset'
	done
    fi	
}
# Define Function
## Mount SGE File Systems Across Network on All Nodes - Universal File Paths
function grid-agent_synchronize(){
    # Define Function
    if [ ! -z "$(echo ${GRID_START} | grep -o 'mount')" ]; then
	## Loop through each compute node and mount the relevant file systems
       	for node in ${GRID_COMPUTE_NODES}; do
	    # Mount Source File System on Each Node
	    local sshfs_opts=$(echo 'allow_other,' ${GRID_SSHFS_OPTS}) 	    ## Update SSHFS OPTS with allow other
	    grid-agent_sshfs ${GRID_ADMIN} ${GRID_MASTER_NODE} ${SGE_ROOT} ${node} ${SGE_ROOT} 'enable_sudo' "${sshfs_opts}"
	    # Mount User Home Directory on Each Node
	    local sshfs_opts=$(echo ${GRID_SSHFS_OPTS}) 	    ## no need to allow other for user (respect their privacy!)
	    grid-agent_sshfs ${GRID_USER} ${GRID_MASTER_NODE} ${GRID_NODE_HOME} ${node} ${GRID_HOME} '' "${sshfs_opts}"
	done
    elif [ ! -z "$(echo ${GRID_STOP} | grep -o 'umount')" ]; then
	## Loop through each compute node and unmount the relevant file system
	for node in ${GRID_COMPUTE_NODES}; do
	    # Unmount Source File Systems on Each Node
	    ssh ${GRID_ADMIN}'@'${node} '[ -d "'${SGE_ROOT}'/" ] && openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in '${SAFETYKEYFILE}' -d | sudo -S diskutil umount force '${SGE_ROOT}'/; [ -d "'${SGE_ROOT}'/" ] && echo "!! Unmount Failed"; [ ! -d "'${SGE_ROOT}'/" ] && echo "⏫  Unmounted ${SGE_ROOT}"'
	    # Unmount User Home Directory on Each Node
	    ssh ${GRID_ADMIN}'@'${node} '[ -d "'${GRID_HOME}'/" ] && diskutil umount force '${GRID_HOME}'/; [ -d "'${GRID_HOME}'/" ] && echo "!! Unmount Failed"; [ ! -d "'${GRID_HOME}'/" ] && echo "⏫  Unmounted Grid Home Folder: '${GRID_HOME}'"'
	done
    fi
}
# Define Function
## Set up SSHKEYS with KEYCHAIN
function grid-agent_keychain(){
	local user=${1}
	local client=${2}
	local host=${3}
	local stop=${4}
	echo -e "\t🔧  Checking for Keys: ${user}@${client}->${host} ${stop}"
	ssh ${user}'@'${client} -t 'export PATH=$PATH:/usr/local/bin; [ ! -d ${HOME}/ssh-tools ] && git clone https://github.com/seldamat/ssh-tools.git ${HOME}/ssh-tools; [ -d ${HOME}/ssh-tools ] && cd ${HOME}/ssh-tools && git pull; echo '' && ${HOME}/ssh-tools/setup-sshkeys -uname $(whoami) -host '${host}' -prvkey ogs_rsa -pubkey '${GRID_SSHKEY}'.pub -keytype rsa --keychain '${stop}';'
}
# Define Function
## Mount systems with SSHFS/FUSE
function grid-agent_sshfs(){
	local user=${1}
	local host=${2}
	local sshfs_remotefs=${3}
	local client=${4}
	local sshfs_mountpoint=${5}
	local sshfs_opts=${7}
	local enable_sudo=${6}
	# Mount file systems with or without sudo depending on use case
	echo -e "* Mounting remote file systems: ${user}@${host}"
	if [ -z "${enable_sudo}" ]; then
		ssh ${user}'@'${client} 'export PATH=${PATH}:/usr/local/bin; eval `keychain --agents ssh --eval`; [ ! -d '${sshfs_mountpoint}' ] && mkdir -vp '${sshfs_mountpoint}'; sshfs '${user}'@'${host}':'${sshfs_remotefs}' '${sshfs_mountpoint}' -o '${sshfs_opts}''
	else
	    # log in and mount with sudo
	    ssh ${user}'@'${client} '[ ! -d '${sshfs_mountpoint}' ] && openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in '${SAFETYKEYFILE}' -d | sudo -S mkdir -vp '${sshfs_mountpoint}'; export PATH=${PATH}:/usr/local/bin; eval `keychain --agents ssh --eval`; openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in '${SAFETYKEYFILE}' -d | sudo -S sshfs '${user}'@'${host}':'${sshfs_remotefs}' '${sshfs_mountpoint}' -o '${sshfs_opts}''
	fi
}
# Define Function
## Help
function grid-agent_help(){
	help_text=$(cat <<-EOF
\n
Syntax : ${0##*/} [start|stop 'action1 .. actionK'] [setup]
\n\n
--Setting up for the first time
\n\t	${0##*/} setup
\n\n
--Starting a Service
\n\t	${0##*/} start keychain\t  # authenticate keyless log in between head and worker node
\n\t	${0##*/} start engine\t\t	  # Start deamons on head and worker nodes
\n\t	${0##*/} start mount\t\t	  # Share filesystems for grid management & job execution
\n\n
--Stopping a Service
\n\t	${0##*/} stop keychain\t  # secure delete of trust
\n\t	${0##*/} stop engine\t\t	  # banish deamons
\n\t	${0##*/} stop mount\t\t	  # Unshare filesystems for grid management & job exeuction
\n
\nPrint this message with >> ${0##*/} ?|-h|h|-help|help|--help
\n
EOF
)
echo -e ${help_text}
}
# Parse Options
while :; do
    case ${1} in
    'setup')
		setup='setitallup'
		;;
	'start')
       	if [ -n ${2} ]; then
		shift
		GRID_START=$@
		echo $GRID_START
		break
	    else
		GRID_START="keychain mount engine"
	    fi
	    ;;
	'stop')
	    if [ -n ${2} ]; then
		shift
		GRID_STOP=$@
		break
	    else
		GRID_STOP="engine"
	    fi
	    ;;
	'?'|'-h'|'h'|'-help'|'help'|'--help')
	    grid-agent_help
	    exit
	    ;;
	?*)
	    printf '\n ‼️ Warning: Unknown option: %s\n' "${1}" >&2
	    exit
	    ;;
	*)
	    break
    esac
    shift
done
# Load Environmental Variables from Default File
## sourcing loads all f(x)'s and variables into environment
. $(pwd)/grid-config config q
# Execute :: Set Up Everything For First Time
## configure parameters and install grid tools on all hosts, load all parameters into namespace
[ ! -z "${setup}" ] && . grid-config 'install' && .grid-config config q
## copy local configuration file to all hosts
[ ! -z "${setup}" ] && grid-config remexe "scp $(whoami)@$(hostname):${GRID_CONFIG_TEMPLATE} $(dirname ${GRID_CONFIG_TEMPLATE})/"
## cache sudo password on all hosts
[ ! -z "${setup}" ] && grid-config intremexe "${HOME}/grid-tools/grid-config cache-sudo q"
## set up keyless log in between all pairs of hosts
[ ! -z "${setup}" ] && GRID_START='keychain' && grid-agent_icebreaker
## mount grid file systems on all hosts
[ ! -z "${setup}" ] && GRID_START='mount' && grid-agent_synchronize
# Execute :: Start Services
[ -z "${setup}" ] && grid-agent_startservices
##
##
##
#
#
