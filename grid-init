#!/bin/bash
#
# GRID-INIT
##
## Start/Stop Services
##
##		1. SGE Deamons
##
##		2. Keyless Login between Nodes
##
##		3. Mount Shared File Systems for Management & Job Execution
##	

# Define Function
## Help
function grid-agent_help(){
	help_text=$(cat <<-EOF
\n
Syntax : ${0##*/} >> 'action1 .. actionK'
\n\n
Accepted actions :: 
\n
--Starting a Service
\n\t	${0##*/} >> keychain\t  # authenticate keyless log in between head and worker node
\n\t	${0##*/} >> engine\t	  # Start deamons on head and worker nodes
\n\t	${0##*/} >> mount\t\t	  # Share filesystems for grid management & job exeuction
\n\n
--Stopping a Service
\n\t	${0##*/} x> keychain\t  # secure delete of trust
\n\t	${0##*/} x> engine\t	  # banish deamons
\n\t	${0##*/} x> mount\t\t	  # Unshare filesystems for grid management & job exeuction
\n
EOF
)
echo -e ${help_text}
}

# Define Function
# Start Relevant Services
function grid-agent_startservices(){
	# Start SGE deamons
	grid-agent_sgedeamon
	# Configure Keychain Between All Nodes
	grid-agent_icebreaker		
	# Mount SGE File Systems Across Network on All Nodes - Universal File Paths
	grid-agent_synchronize	
}
# Define Function
## Start SGE Deamons
function grid-agent_sgedeamon(){
	local node=''
	# Start SGE Master Deamon
	if [ ! -z "$(echo ${GRID_START} | grep -o 'engine')" ]; then
		ssh ${GRID_ADMIN}'@'${GRID_MASTER_NODE} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && /opt/ogs/bin/darwin-x64/sge_qmaster && sleep 1; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && echo "!! HOST ERROR - sge_qmaster is not running - check environment and/or host config"; [ ! -z "${service}" ] && echo -e "✅  Master Host was started successfully - sge_qmaster is running with PID: ${service}"'		
		for node in ${GRID_COMPUTE_NODES}; do
			ssh ${GRID_ADMIN}'@'${node} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && /opt/ogs/bin/darwin-x64/sge_execd && sleep 1; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && echo "!! HOST ERROR - sge_execd is not running - check enviroment and/or host config"; [ ! -z "${service}" ] && echo -e "✅  Execution Host was started successfully - sge_execd is running with PID: ${service}"'		
		done		
	elif [ ! -z "$(echo ${STOP} | grep -o 'engine')" ]; then
		ssh ${GRID_ADMIN}'@'${GRID_MASTER_NODE} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_qmaster")); [ ! -z "${service}" ] && pkill sge_qmaster && sleep 1; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && echo "⛔ QMaster Host:'${GRID_MASTER_NODE}' Has Shutdown"; [ ! -z "${service}" ] && echo -e "!! SHUTDOWN ERROR - sge_qmaster is still running with PID: ${service}"'				
		for node in ${GRID_COMPUTE_NODES}; do
			ssh ${GRID_ADMIN}'@'${node} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && pkill sge_execd && sleep 1; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && echo "⛔ Execution Node:'${node}' Has Shutdown"; [ ! -z "${service}" ] && echo -e "!! SHUTDOWN ERROR - sge_execd is still running with PID: ${service}"'		
		done				
	fi
}
# Define Function
## Configure KEYCHAIN Between All Nodes
function grid-agent_icebreaker(){
	# Form trust between all nodes (users & admin)
	if [ ! -z "$(echo ${GRID_START} | grep -o 'keychain-all')" ]; then
		# Loop through each compute node
		for hostnode in ${GRID_COMPUTE_NODES}; do
			for clientnode in ${GRID_COMPUTE_NODES}; do
				grid-agent_keychain ${GRID_USER} ${clientnode} ${hostnode}
				[ ! -z "${GRID_ADMIN}" ] || [ "${GRID_ADMIN}" != "${GRID_USER}" ] && grid-agent_keychain ${GRID_ADMIN} ${clientnode} ${hostnode}
			done
		done
	elif [ ! -z "$(echo ${STOP} | grep -o 'keychain-all')"  ]; then
		# Loop through each compute node
		for hostnode in ${GRID_COMPUTE_NODES}; do
			for clientnode in ${GRID_COMPUTE_NODES}; do
				grid-agent_keychain ${GRID_USER} ${clientnode} ${hostnode}
				[ ! -z "${GRID_ADMIN}" ] || [ "${GRID_ADMIN}" != "${GRID_USER}" ] && grid-agent_keychain ${GRID_ADMIN} ${clientnode} ${hostnode}
			done
		done		
	fi	
	# Form trust from Master to All Nodes
	if [ ! -z "$(echo ${GRID_START} | grep -o 'keychain')" ]; then
		# Loop through each compute node
		for node in ${GRID_COMPUTE_NODES}; do
			grid-agent_keychain ${GRID_USER} ${node} ${GRID_MASTER_NODE}
			[ ! -z "${GRID_ADMIN}" ] || [ "${GRID_ADMIN}" != "${GRID_USER}" ] && grid-agent_keychain ${GRID_ADMIN} ${node} ${GRID_MASTER_NODE} '--reset'	
		done
	elif [ ! -z "$(echo ${STOP} | grep -o 'keychain')" ]; then
		# Loop through each compute node
		for node in ${GRID_COMPUTE_NODES}; do
			grid-agent_keychain ${GRID_USER} ${node} ${GRID_MASTER_NODE}
			[ ! -z "${GRID_ADMIN}" ] || [ "${GRID_ADMIN}" != "${GRID_USER}" ] && grid-agent_keychain ${GRID_ADMIN} ${node} ${GRID_MASTER_NODE} '--reset'
		done
	fi	
}
# Define Function
## Mount SGE File Systems Across Network on All Nodes - Universal File Paths
function grid-agent_synchronize(){
# Define Function
	if [ ! -z "$(echo ${GRID_START} | grep -o 'mount')" ]; then
		## Loop through each compute node and mount the relevant file systems
		for node in ${GRID_COMPUTE_NODES}; do
			# Mount Source File System on Each Node
			## Update SSHFS OPTS with allow other
			local sshfs_opts=$(echo 'allow_other,' ${GRID_SSHFS_OPTS})			
			grid-agent_sshfs ${GRID_ADMIN} ${GRID_MASTER_NODE} ${SGE_ROOT} ${node} ${SGE_ROOT} ${sshfs_opts} 'enable-sudo'
			# Mount User Home Directory on Each Node
			## no need to allow other for user (respect their privacy!)
			local sshfs_opts=$(echo ${GRID_SSHFS_OPTS})
			grid-agent_sshfs ${GRID_USER} ${GRID_MASTER_NODE} ${GRID_NODE_HOME} ${node} ${GRID_HOME} ${sshfs_opts} '' 			
		done
	elif [ ! -z "$(echo ${STOP} | grep -o 'umount')" ]; then
		## Loop through each compute node and unmount the relevant file systems
		for node in ${GRID_COMPUTE_NODES}; do
			# Unmount Source File Systems on Each Node
			ssh ${GRID_ADMIN}'@'${node} '[ -d "'${SGE_ROOT}'/" ] && openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in '${SAFETYKEYFILE}' -d | sudo -S diskutil umount force '${SGE_ROOT}'/; [ -d "'${SGE_ROOT}'/" ] && echo "!! Unmount Failed"; [ ! -d "'${SGE_ROOT}'/" ] && echo "⏫  Unmounted ${SGE_ROOT}"'
			# Unmount User Home Directory on Each Node
			ssh ${GRID_ADMIN}'@'${node} '[ -d "'${GRID_HOME}'/" ] && diskutil umount force '${GRID_HOME}'/; [ -d "'${GRID_HOME}'/" ] && echo "!! Unmount Failed"; [ ! -d "'${GRID_HOME}'/" ] && echo "⏫  Unmounted Grid Home Folder: '${GRID_HOME}'"'
		done
	fi
}
# Define Function
## Set up SSHKEYS with KEYCHAIN
function grid-agent_keychain(){
	local user=${1}
	local client=${2}
	local host=${3}
	local stop=''
	echo -e "\t🔧  Checking for Keys: ${user}@${client}"
	ssh ${user}'@'${client} -t 'export PATH=$PATH:/usr/local/bin; [ ! -d ${HOME}/ssh-tools ] && git clone https://github.com/seldamat/ssh-tools.git ${HOME}/ssh-tools; [ -d ${HOME}/ssh-tools ] && cd ${HOME}/ssh-tools && git pull; [ ! -f ${HOME}/.ssh/'${GRID_SSHKEY}' ] && echo '' && ${HOME}/ssh-tools/setup-sshkeys -uname $(whoami) -host '${host}' -prvkey ogs_rsa -pubkey '${GRID_SSHKEY}'.pub -keytype rsa --keychain '${stop}';'
}
# Define Function
## Mount systems with SSHFS/FUSE
function grid-agent_sshfs(){
	local user=${1}
	local host=${2}
	local sshfs_remotefs=${3}
	local client=${4}
	local sshfs_mountpoint=${5}
	local sshfs_opts=${6}
	local enable_sudo=${7}
	# Check Keychain is Configured (sshfs reconnect won't work otherwise)
	grid-agent_keychain ${user} ${client} ${host}
	# Mount file systems with or without sudo depending on use case
	echo -e "* Mounting remote file systems: ${user}@${host}"
	if [ -z "${enable_sudo}" ]; then
		ssh ${user}'@'${client} 'export PATH=${PATH}:/usr/local/bin; eval `keychain --agents ssh --eval`; [ ! -d '${GRID_HOME}' ] && mkdir -vp '${GRID_HOME}'; /usr/local/bin/sshfs '${user}'@'${host}':'${GRID_NODE_HOME}' '${GRID_HOME}' -o '${sshfs_opts}''
	else
		# first get password and send it to the host
		grid-agent_getuserpw ${user} ${host}
		# now you can log in and mount with sudo
		ssh ${user}'@'${client} '[ ! -d '${GRID_HOME}' ] && openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in '${SAFETYKEYFILE}' -d | sudo -S mkdir -vp '${GRID_HOME}'; export PATH=${PATH}:/usr/local/bin; eval `keychain --agents ssh --eval`; openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in '${SAFETYKEYFILE}' -d | sudo -S /usr/local/bin/sshfs '${user}'@'${host}':'${GRID_HOME}' '${GRID_NODE_HOME}' -o '${sshfs_opts}''
	fi
}
# Define Function
## Securely store passwords on remote host for non-interactive sudo shell (i.e. via ssh without -t but with sudo commands)
## - can also be used to store local password 
function grid-helper_getuserpw(){
	local user=${1}
	local host=${2}
	# password is stored in encrypted file with random cipher - global variable: SAFETYKEY, this is used to decrypt below
	SAFETYKEYFILE="${HOME}/.ssh/.safety.${host}.ogs" && SAFETYKEY=$(pwgen 256)
	read -sp "👤  Please Enter Password for ${user}@${host}:  " password
	## TODO
	#		- cant you just execute these commands remotely and avoid the cp?
	echo ${password} | openssl enc -aes-256-cbc -k "${SAFETYKEY}" -out "${SAFETYKEYFILE}" && unset password # vulnerable
	# if host is other than local, copy the password to the remote host so that it can be read via remote command execution for sudo...
	[ "${host}" != "$(hostname)" ] && echo -e "* Copying Safety Key to ${host}" && scp -v ${SAFETYKEYFILE} ${user}@${host}:'${HOME}/.ssh/' # this should work without password once keys are set up
	#password=$(openssl enc -aes-256-cbc -k "${SAFETYKEY}" -in "${SAFETYKEYFILE}" -d)
}

# Retrieve Environmental Variables

gconf 

while :; do
	case ${1} in
		'>>')
			if [ -n "${2}" ]; then
				GRID_START=${2}
				shift
			else
				GRID_START="engine"
			fi			
		;;
		'x>')
			if [ -n "${2}" ]; then
				GRID_STOP=${2}
				shift
			else
				GRID_STOP="engine"
			fi			
		;;
		'?'|'-h'|'h'|'-help'|'help'|'--help')
			grid-agent_help
			exit
		;;
		?*)
			printf '\n ‼️ Warning: Unknown option: %s\n' "${1}" >&2
			exit
			;;
		*)
			break		
	esac
	shift
done



