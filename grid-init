#!/bin/bash
#
# GRID-INIT
##
## Start/Stop Services
##
##		1. SGE Deamons
##
##		2. Keyless Login between Nodes
##
##		3. Mount Shared File Systems for Management & Job Execution
##	

##		TESTING
##				✅ check keychain creation  (mostly bug free on first pass)
##				-  check sshfs
##						** major issues with reading password from cached file
##		
##
##		TODO
##				- add benchmark function
##				- update help
##				- add uninstall (reverse actions of setup)
##				- check if mounts are successful
##				- more information when looping through hosts..
##				- weird things with different user homes being moutned
##				- tool for checking whether things are mounted
##				- autosetup of host homes on CFMI-CFS
##
# Define Function
## Set Up Everything For First Time
function grid-agent_setup(){
	## TODO
	##		- use less passwords.. too much typing
	##		- clean up all the output to the screen
	##		- have check points to route where you're oging
	## configure parameters and install grid tools on all hosts, load all parameters into namespace
	echo -e '\n🛠  Checking for latest installation...\n' && $(pwd)/grid-config 'install' && . $(pwd)/grid-config config q
	## test remote command execution.. will create keys and cache sudo
	echo -e '\n🛠  Testing Remote Command Execution on Pool: '${GRID_COMPUTE_NODES}; $(pwd)/grid-config remexe 'sudo hostname->'$(hostname)'; echo 📢 can you hear me now?; ${HOME}/grid-tools/grid-config info'
	## set up keyless log in between all pairs of hosts
	echo -e '\n🛠  Setting Up SSH Keys'; GRID_START='keychain' && grid-agent_icebreaker
	## mount grid file systems on all hosts
	echo -e '\n🛠  Mounting Grid File Systems'; GRID_START='mount' && grid-agent_synchronize	
}
# Define Function
## Reverse actions of setup
function grid-agent_uninstall(){
	## TODO
	##		- uninstall grid tools from all compute nodes, including .grid folder
	##		- delete all key pairs and clear authorized_keys file
	##		- umount everything
	return
}
# Define Function
## Start Relevant Services
function grid-agent_startservices(){
    # Configure Keychain Between All Nodes
    grid-agent_icebreaker
    # Mount SGE File Systems Across Network on All Nodes - Universal File Paths
    grid-agent_synchronize	    
    # Start SGE deamons
    grid-agent_sgedeamon
}
# Define Function
## Start SGE Deamons
function grid-agent_sgedeamon(){
    local node=''
    # Start SGE Master Deamon
    if [ "$(echo ${GRID_START} | grep -o 'engine')" ]; then
		echo -e "\nStarting Master Host: ${GRID_ADMIN}@${GRID_MASTER_NODE}"
		ssh ${GRID_ADMIN}'@'${GRID_MASTER_NODE} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile  > /dev/null; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && /opt/ogs/bin/darwin-x64/sge_qmaster && sleep 1; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && echo "!! HOST ERROR - sge_qmaster is not running - check environment and/or host config"; [ ! -z "${service}" ] && echo -e "✅  Master Host was started successfully - sge_qmaster is running with PID: ${service}"'
		for node in ${GRID_COMPUTE_NODES}; do
		    echo -e "\nWaking Worker Node: ${GRID_ADMIN}@${node}"
		    ssh ${GRID_ADMIN}'@'${node} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile > /dev/null; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && /opt/ogs/bin/darwin-x64/sge_execd && sleep 1; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && echo "!! HOST ERROR - sge_execd is not running - check enviroment and/or host config"; [ ! -z "${service}" ] && echo -e "✅  Execution Host was started successfully - sge_execd is running with PID: ${service}"'
		done
    elif [ "$(echo ${GRID_STOP} | grep -o 'engine')" ]; then
		echo -e "\nStopping Master Host: ${GRID_ADMIN}@{GRID_MASTER_NODE}"
		ssh ${GRID_ADMIN}'@'${GRID_MASTER_NODE} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile > /dev/null; service=$(echo $(pgrep "sge_qmaster")); [ ! -z "${service}" ] && pkill sge_qmaster && sleep 1; service=$(echo $(pgrep "sge_qmaster")); [ -z "${service}" ] && echo "⛔ QMaster Host:'${GRID_MASTER_NODE}' Has Shutdown"; [ ! -z "${service}" ] && echo -e "!! SHUTDOWN ERROR - sge_qmaster is still running with PID: ${service}"'
		for node in ${GRID_COMPUTE_NODES}; do
		    echo -e "\nClocking out Worker Node: ${GRID_ADMIN}@${node}"
		    ssh ${GRID_ADMIN}'@'${node} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile > /dev/null; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && pkill sge_execd && sleep 1; service=$(echo $(pgrep "sge_execd")); [ -z "${service}" ] && echo "⛔ Execution Node:'${node}' Has Shutdown"; [ ! -z "${service}" ] && echo -e "!! SHUTDOWN ERROR - sge_execd is still running with PID: ${service}"'
		done
    fi
}
# Define Function
## Configure KEYCHAIN Between All Nodes
function grid-agent_icebreaker(){
    # Form trust for all Grid Users from Master to All Nodes 
    if [ "$(echo ${GRID_START} | grep -o 'keychain')" ]; then
    	echo -e "\t🔧  Checking for Keys: ${user}@${client}->${host}"
    	$(pwd)/grid-config intremexe 'export PATH=$PATH:/usr/local/bin; [ ! -d ${HOME}/ssh-tools ] && git clone https://github.com/seldamat/ssh-tools.git ${HOME}/ssh-tools; [ -d ${HOME}/ssh-tools ] && cd ${HOME}/ssh-tools && git pull; echo '' && ${HOME}/ssh-tools/setup-sshkeys -uname $(whoami) -host '${GRID_MASTER_NODE}' -prvkey '${GRID_SSHKEY}' -pubkey '${GRID_SSHKEY}'.pub -keytype rsa --keychain;' q
    elif [ "$(echo ${GRID_STOP} | grep -o 'keychain')" ]; then
    	echo -e "\t🔧  Deleting Trust: ${user}@${client}->${host}"
		$(pwd)/grid-config intremexe 'export PATH=$PATH:/usr/local/bin; [ ! -d ${HOME}/ssh-tools ] && git clone https://github.com/seldamat/ssh-tools.git ${HOME}/ssh-tools; [ -d ${HOME}/ssh-tools ] && cd ${HOME}/ssh-tools && git pull; echo '' && ${HOME}/ssh-tools/setup-sshkeys -uname $(whoami) -host '${GRID_MASTER_NODE}' -prvkey '${GRID_SSHKEY}' -pubkey '${GRID_SSHKEY}'.pub -keytype rsa --keychain --reset;' q
    fi	
}
# Define Function
## Mount SGE File Systems Across Network on All Nodes - Universal File Paths
##  -- this entire function may not be needed.. can probably just use remote execution
function grid-agent_synchronize(){
	local user=''
	local node=''
    # Define Function
    if [ "$(echo ${GRID_START} | grep -o 'mount')" ]; then
    	# Administrator must mount source with allow_other flag otherwise users can't see source
    	if [ -z "$(echo ${GRID_SSHFS_OPTS} | grep -o 'allow_other,')" ]; then
    		local sshfs_opts=$(echo 'allow_other,'${GRID_SSHFS_OPTS}) 	    ## Update SSHFS OPTS with allow other
    	else
    		local sshfs_opts=${GRID_SSHFS_OPTS}
    	fi
    	# Mount OGS source into SGE_ROOT (will be run as GRID_ADMIN)
		echo -e "\n🗄 Mounting OGS Source from Master: ${GRID_ADMIN}@client<--${GRID_MASTER_NODE}:${SGE_ROOT}"
		$(pwd)/grid-config remexe '[ ! -d '${SGE_ROOT}' ] && sudo mkdir -vp '${SGE_ROOT}'; export PATH=${PATH}:/usr/local/bin && eval `keychain --agents ssh --eval '${GRID_SSHKEY}'`; sudo sshfs '${GRID_ADMIN}'@'${GRID_MASTER_NODE}':'${SGE_ROOT}'/ '${SGE_ROOT}'/ -o '${sshfs_opts}'' q
		# Mount OGS home for each user
		echo -e "\n🗄 Mounting Home Directory for OGS Users: client<--${GRID_MASTER_NODE}:${GRID_HOME}" && sshfs_opts=${GRID_SSHFS_OPTS}
		for user in ${GRID_USER}; do
			$(pwd)/grid-config remexe 'export PATH=${PATH}:/usr/local/bin; eval `keychain --agents ssh --eval '${GRID_SSHKEY}'`; [ ! -d '${GRID_HOME}' ] && mkdir -vp '${GRID_HOME}'; sshfs '${user}'@'${GRID_MASTER_NODE}':'${GRID_NODE_HOME}'/ '${GRID_HOME}'/ -o '${sshfs_opts}'' user ${user} q
		done
    elif [ "$(echo ${GRID_STOP} | grep -o 'mount')" ]; then
    	# Unmount Source File Systems on Each Node
    	echo -e "\n🗄 Unmounting OGS Source from Master: ${GRID_ADMIN}@${client}x--x${GRID_MASTER_NODE}:${SGE_ROOT}"
    	$(pwd)/grid-config remexe '[ -d '${SGE_ROOT}' ] && sudo diskutil umount force '${SGE_ROOT}'/' q
    	# Unmount User Home Directory on Each Node
    	echo -e "\n🗄 Unmounting Home Directory for OGS Users: ${client}x--x${GRID_MASTER_NODE}:${GRID_HOME}"
		$(pwd)/grid-config remexe '[ -d "'${GRID_HOME}'/" ] && diskutil umount force '${GRID_HOME}'/' q
    fi    	
}
# Define Function
## Help
function grid-agent_help(){
	help_text=$(cat <<-EOF
\n
Syntax : ${0##*/} [start|stop 'action1 .. actionK'] [setup]
\n\n
--Setting up for the first time
\n\t	${0##*/} setup
\n\n
--Starting a Service
\n\t	${0##*/} start keychain\t  # authenticate keyless log in between head and worker node
\n\t	${0##*/} start engine\t\t	  # Start deamons on head and worker nodes
\n\t	${0##*/} start mount\t\t	  # Share filesystems for grid management & job execution
\n\n
--Stopping a Service
\n\t	${0##*/} stop keychain\t  # secure delete of trust
\n\t	${0##*/} stop engine\t\t	  # banish deamons
\n\t	${0##*/} stop mount\t\t	  # Unshare filesystems for grid management & job exeuction
\n
\nPrint this message with >> ${0##*/} ?|-h|h|-help|help|--help
\n
EOF
)
echo -e ${help_text}
}
# Load Environmental Variables from Default File - sourcing loads all f(x)'s and variables into environment
. $(pwd)/grid-config load q
# Parse Options
while :; do
    case ${1} in
    'setup')
		setup='setitallup'
		;;
	'start')
       	if [ -n ${2} ]; then
			shift
			GRID_START=$@
			break
	    else
			GRID_START="keychain mount engine"
	    fi
	    ;;
	'stop')
	    if [ -n ${2} ]; then
			shift
			GRID_STOP=$@
			break
	    else
			GRID_STOP="engine"
	    fi
	    ;;
	'?'|'-h'|'h'|'-help'|'help'|'--help')
	    grid-agent_help
	    exit
	    ;;
	?*)
	    printf '\n ‼️ Warning: Unknown option: %s\n' "${1}" >&2
	    exit
	    ;;
	*)
	    break
    esac
    shift
done
## Execute :: Set Up Everything For First Time
[ "${setup}" ] && grid-agent_setup
# Execute :: Start Services
[ -z "${setup}" ] && grid-agent_startservices
echo '* * *  grid-init  * * *'
##
##
##
#
#
