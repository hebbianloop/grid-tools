#!/bin/bash
#
# GRID-CONFIG
##
##	This program configures global variables for grid management.
##
##      TODO
##             -  check wifi/network connectivity?
##			   -  add cluster status checks (qconf/qhost/etc)
##             -  encrypt template? it conatins passphrase
##			   -  installation of .bashrc for configuration
##			   -  add ability to remote execute on specified host as opposed to config

# Set default values for global variables
GRID_CONFIG_TEMPLATE=${HOME}/.grid/.gconf_template
reset=''
quiet=''
info=''	   
quiet=''
GRID_INSTALL=''	        
USER_SUDO=''	    
START_KEYCHAIN=''
CACHE_SUDO=''	   
GRID_COMMAND=''
LOAD_CONFIG=''
GRID_BREW=''
GRID_UNBREW=''
SSH_OPTS=''
USER=''
# Define Function
## Print Current Configuration to Screen and Ask User for Modifications
function grid-config_run(){
    ########################################################################
    [ -z "${quiet}" ] && echo 'üõ†   CONFIGURATE GRID  üõ†'    
    [ -z "${quiet}" ] && echo '___________________________'
    [ -z "${quiet}" ] && echo '|     üñ• -üñ• -üñ• -üñ• -üñ•       |'
	[ -z "${quiet}" ] && echo '|     |  |  |  |  |       |'
	[ -z "${quiet}" ] && echo '|     üñ• -üñ• -üñ• -üñ• -üñ•       |'
	[ -z "${quiet}" ] && echo '---------------------------'
    ########################################################################
	echo 'üó£ '$(whoami)'@'$(hostname)
    # Cache the sudoer password on all compute nodes
    [ "${CACHE_SUDO}" ] && grid-config_getuserpw && echo '  ‚öôÔ∏è --> return' && return 
    # Load variables into namespace
    [ "${LOAD_CONFIG}" ] && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
    # Check for existing configuration files
    grid-config_check
    # Execute remote command on all compute nodes
    [ "${GRID_COMMAND}" ] && grid-config_ssh-exe    
    # Run a brew install/uninstall on list of remote hosts
    [ "${GRID_BREW}" ] || [ "${GRID_UNBREW}" ] && grid-config_brew
    # Install grid-tools on all compute nodes
    [ "${GRID_INSTALL}" ] && [ "${GRID_COMPUTE_NODES}" ] && grid-config_install-tools ${GRID_USER} ${GRID_COMPUTE_NODES}
    # Start keychain app on all compute nodes
    [ "${START_KEYCHAIN}" ] && grid-config_startkeychain
}
# Define Function
## Check for existence of configuration‚öôÔ∏è file
function grid-config_check(){
    # Check for File Reset
    [ -f "${GRID_CONFIG_TEMPLATE}" ] && [ "${reset}" ] && echo 'Deleting Configuration File :: '${GRID_CONFIG_TEMPLATE} && rm ${GRID_CONFIG_TEMPLATE} && echo '  ‚öôÔ∏è --> return' && return
    # Read existing Configuration File and load into namespace
    if [ -f "${GRID_CONFIG_TEMPLATE}" ]; then
    	if [ "${quiet}" ]; then
    		proceed='A' # automatically advance and load variables in configuration file
    	else
    		echo 'Global Configuration for Grid Services :: ' && echo '_____________________________________________'
    		# print configuration to screen
    		echo "$(cat $GRID_CONFIG_TEMPLATE)" && echo '_____________________________________________' && [ "${info}" ] && echo '  ‚öôÔ∏è --> return' && return
    		read -p "üìç [A]ccept/[E]dit Settings? (return to exit) >>" proceed && echo '_____________________________________________'
		fi
		if [ "${proceed}" = 'E' ] || [ "${proceed}" = 'Edit' ] || [ "${proceed}" = 'e' ]; then
		    grid-config_editconf ${GRID_CONFIG_TEMPLATE} && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
		elif [ "${proceed}" = 'A' ] || [ "${proceed}" = 'a' ] || [ "${proceed}" = 'Accept' ]; then
		    grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
		else
			return
		fi
	else
    	# Populate namespace if config template variable is not defined		
		grid-config_template
    fi
	echo '  ‚öôÔ∏è ---> checked for existing configuration'
}
# Define Function
## Populate namespace
function grid-config_loadvars(){
    local file=${1}
    while read var; do
		eval ${var}
    done < ${file}
    echo '  ‚öôÔ∏è ---> loading '${GRID_CONFIG_TEMPLATE}' into namespace'
}
# Define Function
## Retrieve User Input
##	--  why don't you just open the config file with emacs or text editor? (some people may not know how to use?)
function grid-config_editconf(){
    local file=${1}
    emacs ${file}
    echo '  ‚öôÔ∏è ---> edit'
}
# Define Function
## Brew install
function grid-config_brew(){
	for host in ${GRID_COMPUTE_NODES}; do
		echo 'üñ•  Brewing:  '${GRID_ADMIN}'@'${host}
		[ "${GRID_BREW}" ] && ssh ${GRID_ADMIN}'@'${host} 'export PATH=$PATH:/usr/local/bin; [ -z "$(which brew)" ] && ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; brew install '${GRID_BREW}
		[ "${GRID_UNBREW}" ] && ssh ${GRID_ADMIN}'@'${host} 'export PATH=$PATH:/usr/local/bin; brew uninstall '${GRID_UNBREW}
	done
	echo '  ‚öôÔ∏è ---> brewed'
}
# Define Function
## Install grid-tools and add to path
function grid-config_install-tools(){
	local sgeusers=${1}
	local sgehosts=${2}
	for user in ${sgeusers}; do
    	for host in ${sgehosts}; do
			[ "${GRID_INSTALL}" = "install" ] && echo -e '\nüõ† üñ•  Installing Grid Tools:  '${user}'@'${host} && ssh ${user}'@'${host} 'export PATH=$PATH:/usr/local/bin; [ -d ${HOME}/grid-tools ] && cd ${HOME}/grid-tools && git pull; [ ! -d ${HOME}/grid-tools ] && git clone http://github.com/seldamat/grid-tools.git ${HOME}/grid-tools; source ${HOME}/.bash_profile > /dev/null; checkpath=$(echo ${PATH} | grep -o ${HOME}/grid-tools); [ -z ${checkpath} ] && echo -e "\n#Add Grid Tools to Path\n export PATH=${PATH}:${HOME}/grid-tools\n" >> ${HOME}/.bash_profile; exit'
			[ "${GRID_INSTALL}" = "uninstall" ] && echo -e '\nüõ† üñ•  Uninstalling Grid Tools:  '${user}'@'${host} && ssh ${user}'@'${host} '[ -d ${HOME}/grid-tools ] && rm -frv ${HOME}/grid-tools; exit'
    	done
    done
    echo '  ‚öôÔ∏è ---> grid-tools installed and updated'
}
# Define Function
## Start keychain
function grid-config_startkeychain(){
	echo -e '\nStarting SSH-AGENT on ::  '${GRID_COMPUTE_NODES}
	[ ! -f "${HOME}/.ssh/${GRID_SSHKEY}" ] && echo -e "\n ‚Äº  Error :: ${HOME}/.ssh/${GRID_SSHKEY} does not exist..\n" >&2 && exit
    GRID_COMMAND='export PATH=$PATH:/usr/local/bin; eval `keychain --agents ssh --eval '${GRID_SSHKEY}'`' && grid-config_ssh-exe
    echo -e '\n  ‚öôÔ∏è ---> got keys'    
}
# Define Function
## Execute same command on all hosts on grid
function grid-config_ssh-exe(){
	# Check variable definitions.. user needs to input grid compute nodes!
	[ -z "${GRID_COMPUTE_NODES}" ] && grid-config_check
	# Check whether using configuration file user or input user (useful for when you don't want to loop over users in file or are too lazy to change file)
	if [ -z "${USER}" ]; then
		local user=${GRID_USER}
	else
		user=${USER}
	fi
	# Check whether command is sudo
	[ "$(echo ${GRID_COMMAND} | grep -o "sudo ")" ] && USER_SUDO='itsasudo!'
	# switch all sudo commands to obtain password from stdin using pw cache 
	[ "${USER_SUDO}" ] && GRID_COMMAND=$(echo ${GRID_COMMAND} | sed 's_sudo_openssl enc -aes-256-cbc -k '${SAFETYKEY}' -in ${HOME}/.grid/.safety.$(hostname).ogs  -d | sudo -S_g')				
	# Execute SUDO only with the administrator account if one isn't provided as input
	[ "${USER_SUDO}" ] && [ -z "${USER}" ] && user=${GRID_ADMIN}
	# Loop over users and hosts and do your biz
	local u=''
	local host=''
	for u in ${user}; do
	    for host in ${GRID_COMPUTE_NODES}; do
		# keypairs is a list of all log in portals created by setup-sshkeys
		# TODO ::
		#         - make sure setup-sshkeys --reset deletes this list
		#         - include keyless log in from installation host in setup for grid-init 
    		if [ -z "$(cat ${HOME}/.ssh/keypairs | grep -o "$(whoami)@$(hostname)->${u}@${host}")" ]; then
    			echo -e "\nüîê  No authorized key found for ${u}@${host}, would you like to create them? [Y/N]  " && read -p '‚ñ∂Ô∏è  ' proceed && echo ''
    			if [ "${proceed}" = 'Y' ] || [ "${proceed}" = 'y' ]; then
    				[ ! -d ${HOME}/ssh-tools ] && echo 'Installing ssh-tools' && git clone https://github.com/seldamat/ssh-tools.git ${HOME}/ssh-tools
    				[ -d ${HOME}/ssh-tools ] && echo 'Updating ssh-tools' && cd ${HOME}/ssh-tools && git pull
    				${HOME}/ssh-tools/setup-sshkeys -uname ${u} -host ${host} -prvkey ${GRID_SSHKEY} -pubkey ${GRID_SSHKEY}.pub -keytype rsa --keychain
    			else
    				echo '‚ö†Ô∏è  Proceeding without keys..'
    			fi
	    	fi
			echo -e "\nüì°  Sending Command >> ${u}@${host}: ${GRID_COMMAND}\n"
			if [ -z "${USER_SUDO}" ]; then
				ssh ${SSH_OPTS} ${u}'@'${host} "${GRID_COMMAND}"
			else
				grid-config_cachesudo ${u} ${host}
				ssh ${SSH_OPTS} ${u}'@'${host} ${GRID_COMMAND}
			fi
			echo -e '\n  ‚öôÔ∏è ---> remote command executed'
	    done
	done
}
# Define Function
## Check for Cached SUDO
function grid-config_cachesudo(){
	local user=${1}
	local host=${2}
	# Install/Update Grid-Tools - should clean this up so that you don't have to set and unset install
	GRID_INSTALL='install' && grid-config_install-tools ${user} ${host} && GRID_INSTALL=''
	# Check for keys from remote to local
	ssh -t ${user}@${host} '[ -z $(cat ${HOME}/.ssh/keypairs | grep -o "$(whoami)@$(hostname)->'$(whoami)'@'$(hostname)'") ] && echo -e "\nüîê  No authorized key found for '$(whoami)'@'$(hostname)', would you like to create them? [Y/N]  " && read -p "‚ñ∂Ô∏è  " proceed; [ "${proceed}" = "Y" ] || [ "${proceed}" = "y" ] && [ ! -d ${HOME}/ssh-tools ] && echo "Installing ssh-tools" && git clone https://github.com/seldamat/ssh-tools.git ${HOME}/ssh-tools; [ "${proceed}" = "Y" ] || [ "${proceed}" = "y" ] && [ -d ${HOME}/ssh-tools ] && echo "Updating ssh-tools" && cd ${HOME}/ssh-tools && git pull; [ "${proceed}" = "Y" ] || [ "${proceed}" = "y" ] && ${HOME}/ssh-tools/setup-sshkeys -uname '$(whoami)' -host '$(hostname)' -prvkey '${GRID_SSHKEY}' -pubkey '${GRID_SSHKEY}.pub' -keytype rsa --keychain'
	# Copy Config
	echo -e "\n* Copying Configuration from $(whoami)@$(hostname)"
	ssh -t ${user}@${host} 'export PATH=${PATH}:/usr/local/bin; eval `keychain --agents ssh --eval ogs_rsa`; [ ! -d ${HOME}/.grid/ ] && mkdir -vp ${HOME}/.grid; scp '$(whoami)'@'$(hostname)':'${GRID_CONFIG_TEMPLATE}' ${HOME}/.grid/'
	echo -e "\n* Checking for sudo $(whoami)@$(hostname)"
	ssh -t ${user}@${host} '[ ! -f ${HOME}/.grid/.safety.$(hostname).ogs ] && ${HOME}/grid-tools/grid-config q cache-sudo'
}
# Define Function
## Securely store passwords on remote host for non-interactive sudo shell (i.e. via ssh without -t but with sudo commands)
function grid-config_getuserpw(){
	# password is stored in encrypted file with random cipher - global variable: SAFETYKEY, this is used to decrypt below
	SAFETYKEYFILE="${HOME}/.grid/.safety.$(hostname).ogs"
	# Safetykey is currently read from input configuration file.. ugh this is so bad - need more secure method
	[ -z "${SAFETYKEY}" ] && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	[ -z "${SAFETYKEY}" ] && echo -e '\nEnter Safety Key' && grid-config_editconf ${GRID_CONFIG_TEMPLATE} && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	read -sp "üë§  Please Enter Password for $(whoami)@$(hostname):  " password
	echo ${password} | openssl enc -aes-256-cbc -k "${SAFETYKEY}" -out "${SAFETYKEYFILE}" && unset password # vulnerable
	#password=$(openssl enc -aes-256-cbc -k "${SAFETYKEY}" -in "${SAFETYKEYFILE}" -d)
	echo '  ‚öôÔ∏è ---> got creds'
}
# Define Function -
## Write default template to file
## -- this contains a passphrase.. should this be encrypted?
function grid-config_template(){
    # Create Configuration Directory & Template File if They Don't Exist
    [ ! -d "$(dirname ${GRID_CONFIG_TEMPLATE})" ] && mkdir -vp $(dirname ${GRID_CONFIG_TEMPLATE})
    [ ! -f "${GRID_CONFIG_TEMPLATE}" ] && cat <<-EOF > ${GRID_CONFIG_TEMPLATE}
GRID_ADMIN='sgeadmin'
GRID_COMPUTE_NODES=\'$(hostname)\'
GRID_CONFIG_TEMPLATE=${HOME}/.grid/.gconf_template
GRID_HOME='${HOME}/ogs_home'
GRID_MASTER_NODE=''
GRID_USER='sgeuser'
GRID_NODE_HOME='/Volumes/NFS/home/sgeuser/$(hostname)'
GRID_SSHFS_OPTS='defer_permissions,follow_symlinks,kernel_cache,reconnect,cipher=arcfour,cache=yes'
GRID_SSHKEY='ogs_rsa'
GRID_START=\'engine\'
GRID_STOP=\'engine\'
SAFETYKEY='safetypin'
SGE_ROOT='/opt/ogs'
EOF
	# Load the default settings into environment and print them to screen for user to edit
	grid-config_loadvars ${GRID_CONFIG_TEMPLATE} && grid-config_check
	echo '  ‚öôÔ∏è ---> created default template'
}
# Define Function
## Help
function grid-config_help(){
	help_text=$(cat <<-EOF
\n
Syntax : ${0##*/} [reset|(un/in)stall|superuser] [remexe|brew-(un/in)stall COMMAND] [file FILENAME]
\n\n
This program configures global variables for grid management.
\n\n
Local Options (executed only on localhost) ::
\n
\t\tinfo\t\t\t print contents of grid config template
\tload\t\t<FILE>\t    load a configuration file\n
\treset\t\t\t         delete local configuration file\n
\tconfig\t\t\t  populate local namespace\n
\tquiet\t\t\t  do not print config to screen or ask user to edit\n
\tcache-sudo\t\t  cache sudo password for auto-mount
\n\n
Compute Pool Options (executed on all worker nodes) ::
\n
\tinstall\t\t\t\t     install grid tools with git\n
\tuninstall\t\t\t      delete grid tools\n
\tkeychain\t\t\t start ssh-agent and add grid keys\n
\tbrew\t\t<PACKAGENAME>\t  install package with brew\n
\tunbrew\t\t<PACKAGENAME>\t   uninstall package with brew\n
\tremexe\t\t<COMMAND>\t   remote execution of command\n
\tintremexet\t<COMMAND>\t   remote execution of command with interactive ssh tty\n
\n
\n Print this message with >> ${0##*/} ?|-h|h|-help|help|--help
\n
EOF
)
echo -e ${help_text}
echo '  ‚öôÔ∏è ---> helping hands'
}
# Parse Options
while :; do
    case ${1} in     
	'reset')	    
	    reset='reset'	   
	    ;;
	'info')	    
	    info='showinfoandexit'	   
	    ;;	    
	'quiet'|'q')
		quiet='bequiet!'
		;;
	'install')	    
	    GRID_INSTALL='install'	   
	    ;;	
	'uninstall')	    
	    GRID_INSTALL='uninstall'
	    ;;	
	'keychain')
	    START_KEYCHAIN='start_all_keychains'
	    ;;
	'cache-sudo')
	    CACHE_SUDO='savethepassword'	   
	    ;;
# Remote Execution	    
	'remexe')	    
	    if [ -n "${2}" ]; then		
			GRID_COMMAND=${2}		
			shift		
	    fi	    
	    ;;
	'intremexe')	    
	    if [ -n "${2}" ]; then		
			GRID_COMMAND=${2}		
			SSH_OPTS='-t'
			shift		
	    fi	    
	    ;;	    
	'user')	    
	    if [ -n "${2}" ]; then		
			USER=${2}		
			shift		
	    fi	    
	    ;;	    
# Load vs Reading Files	    
	'load')
	    LOAD_CONFIG='yes'
	    ;;
	'read')    
	    if [ -n "${2}" ]; then		
			GRID_CONFIG_TEMPLATE=${2}		
			shift		
	    fi	    
	    ;;	
# Homebrew
	'brew')	    
	    if [ -n "${2}" ]; then		
			GRID_BREW=${2}		
			shift		
	    fi	    
	    ;;	
	'unbrew')
	    if [ -n "${2}" ]; then		
			GRID_UNBREW=${2}		
			shift		
	    fi	    
	    ;;	   
	'?'|'-h'|'h'|'-help'|'help'|'--help')
	    grid-config_help
	    exit
	    ;;
	?*)
	    printf '\n ‚ÄºÔ∏è Warning: Unknown option: %s\n' "${1}" >&2
	    exit
	    ;;
	*)
	    break
    esac
    shift
done

# Execute configuration
grid-config_run
echo '* * * grid-config * * *'
##
##
#
