#!/bin/bash
#
# GRID-CONFIG
##
##	This program configures global variables for grid management.
##
##      TODO
##             -  check wifi/network connectivity?
##			   -  add cluster status checks (qconf/qhost/etc)

##		TESTING - on localhost
##				✅  grid-config info
##				✅  grid-config reset
##				✅  grid-config install/uninstall
##				✅  grid-config remexe quiet
##				✅  grid-config brew/unbrew
##				  check grid start keychain
##  			✅  check CACHE_SUDO

# Set default values for global variables
GRID_CONFIG_TEMPLATE=${HOME}/.grid/.gconf_template
reset=''
quiet=''
info=''	   
quiet=''
GRID_INSTALL=''	        
USER_SUDO=''	    
START_KEYCHAIN=''
CACHE_SUDO=''	   
GRID_COMMAND=''
LOAD_CONFIG=''
GRID_BREW=''
GRID_UNBREW=''
SSH_OPTS=''
USER=''
# Define Function
## Print Current Configuration to Screen and Ask User for Modifications
function grid-config(){
    [ -z "${quiet}" ] && echo '🛠   CONFIGURATE GRID  🛠'    
    [ -z "${quiet}" ] && echo '___________________________'
    [ -z "${quiet}" ] && echo '|     🖥 -🖥 -🖥 -🖥 -🖥       |'
	[ -z "${quiet}" ] && echo '|     |  |  |  |  |       |'
	[ -z "${quiet}" ] && echo '|     🖥 -🖥 -🖥 -🖥 -🖥       |'
	[ -z "${quiet}" ] && echo '---------------------------'		
    # Cache the sudoer password on all compute nodes
    [ ! -z "${CACHE_SUDO}" ] && grid-config_getuserpw && echo '⚙️ --> return' && return 
    # Load variables into namespace
    [ ! -z "${LOAD_CONFIG}" ] && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
    # Check for existing configuration files
    grid-config_check
    # Execute remote command on all compute nodes
    [ ! -z "${GRID_COMMAND}" ] && grid-config_ssh-exe    
    # Run a brew install/uninstall on list of remote hosts
    [ ! -z "${GRID_BREW}" ] || [ ! -z "${GRID_UNBREW}" ] && grid-config_brew
    # Install grid-tools on all compute nodes
    [ ! -z "${GRID_INSTALL}" ] && [ ! -z "${GRID_COMPUTE_NODES}" ] && grid-config_install-tools
    # Start keychain app on all compute nodes
    [ ! -z "${START_KEYCHAIN}" ] && grid-config_startkeychain
    echo '⚙️  '$(date)
}
# Define Function
## Check for existence of configuration⚙️ file
function grid-config_check(){
    # Check for File Reset
    [ -f "${GRID_CONFIG_TEMPLATE}" ] && [ ! -z "${reset}" ] && echo 'Deleting Configuration File :: '${GRID_CONFIG_TEMPLATE} && rm ${GRID_CONFIG_TEMPLATE} && echo '⚙️ --> return' && return
    # Read existing Configuration File and load into namespace
    if [ -f "${GRID_CONFIG_TEMPLATE}" ]; then
	[ -z "${quiet}" ] && echo 'Global Configuration for Grid Services :: ' && echo '_____________________________________________'
	# print configuration to screen
	[ -z "${quiet}" ] && echo "$(cat $GRID_CONFIG_TEMPLATE)" && echo '_____________________________________________' && [ ! -z "${info}" ] && echo '⚙️ --> return' && return
	[ -z "${quiet}" ] && read -p "📍 [A]ccept/[E]dit Settings? (return to exit) >>" proceed && echo '_____________________________________________'
	if [ "${proceed}" = 'E' ] || [ "${proceed}" = 'Edit' ] || [ "${proceed}" = 'e' ]; then
	    grid-config_editconf ${GRID_CONFIG_TEMPLATE} && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	elif [ "${proceed}" = 'A' ] || [ "${proceed}" = 'a' ] || [ "${proceed}" = 'Accept' ]; then
	    grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	else
		echo '⚙️ --> return'
		return
	fi
    fi
    # Populate namespace if config template variable is not defined
    [ ! -f "${GRID_CONFIG_TEMPLATE}" ] && grid-config_template
    echo '⚙️ ---> check'
}
# Define Function
## Populate namespace
function grid-config_loadvars(){
    local file=${1}
    while read var; do
	eval ${var}
    done < ${file}
    echo '⚙️ ---> load'
}
# Define Function
## Retrieve User Input
##	--  why don't you just open the config file with emacs or text editor? (some people may not know how to use?)
function grid-config_editconf(){
    local file=${1}
    emacs ${file}
    echo '⚙️ ---> edit'
}
# Define Function
## Brew install
function grid-config_brew(){
	for host in ${GRID_COMPUTE_NODES}; do
	echo '🖥  Brewing:  '${GRID_ADMIN}'@'${host}
	[ ! -z "${GRID_BREW}" ] && ssh ${GRID_ADMIN}'@'${host} 'export PATH=$PATH:/usr/local/bin; [ -z "$(which brew)" ] && ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; brew install '${GRID_BREW}
	[ ! -z "${GRID_UNBREW}" ] && ssh ${GRID_ADMIN}'@'${host} 'export PATH=$PATH:/usr/local/bin; brew uninstall '${GRID_UNBREW}
	done
	echo '⚙️ ---> brewed'
}
# Define Function
## Install grid-tools and add to path
function grid-config_install-tools(){
    for host in ${GRID_COMPUTE_NODES}; do
	[ "${GRID_INSTALL}" = "install" ] && echo -e '\n🛠 🖥  Installing Grid Tools:  '${GRID_USER}'@'${host} && ssh ${GRID_USER}'@'${host} 'export PATH=$PATH:/usr/local/bin; [ -d ${HOME}/grid-tools ] && cd ${HOME}/grid-tools && git pull; [ ! -d ${HOME}/grid-tools ] && git clone http://github.com/seldamat/grid-tools.git ${HOME}/grid-tools; source ${HOME}/.bash_profile > /dev/null; checkpath=$(echo ${PATH} | grep -o ${HOME}/grid-tools); [ -z ${checkpath} ] && echo -e "\n#Add Grid Tools to Path\n export PATH=${PATH}:${HOME}/grid-tools\n" >> ${HOME}/.bash_profile; exit'
	[ "${GRID_INSTALL}" = "uninstall" ] && echo -e '\n🛠 🖥  Uninstalling Grid Tools:  '${GRID_USER}'@'${host} && ssh ${GRID_USER}'@'${host} '[ -d ${HOME}/grid-tools ] && rm -frv ${HOME}/grid-tools; exit'
    done
    echo '⚙️ ---> grid-tools'
}
# Define Function
## Start keychain
function grid-config_startkeychain(){
	echo -e '\nStarting SSH-AGENT on ::  '${GRID_COMPUTE_NODES}
	[ ! -f ${GRID_SSHKEY} ] && echo -e "\n ‼  Error :: ${GRID_SSHKEY} does not exist..\n" >&2 && exit
    GRID_COMMAND='export PATH=$PATH:/usr/local/bin; eval `keychain --agents ssh --eval '${GRID_SSHKEY}'`' && grid-config_ssh-exe
    echo '⚙️ ---> got keys'    
}
# Define Function
## Execute same command on all hosts on grid
function grid-config_ssh-exe(){
	[ -z "${USER}" ] && local user=${GRID_USER}
	[ ! -z "${USER}" ] && local user=${USER}
    for host in ${GRID_COMPUTE_NODES}; do
	echo -e "\n📡  Sending Command >> ${GRID_USER}@${host}: ${GRID_COMMAND}"
	[ -z "${USER_SUDO}" ] && ssh ${SSH_OPTS} ${user}'@'${host} "${GRID_COMMAND}"
	[ ! -z "${USER_SUDO}" ] && ssh ${SSH_OPTS} ${user-9}'@'${host} ". ${HOME}/grid-tools/grid-config cache-sudo; openssl enc -aes-256-cbc -k ${SAFETYKEY} -in ${SAFETYKEYFILE} -d | sudo -S ${GRID_COMMAND}"
	echo '⚙️ ---> remote command executed'
    done
}
# Define Function
## Securely store passwords on remote host for non-interactive sudo shell (i.e. via ssh without -t but with sudo commands)
function grid-config_getuserpw(){
	# password is stored in encrypted file with random cipher - global variable: SAFETYKEY, this is used to decrypt below
	SAFETYKEYFILE="${HOME}/.grid/.safety.$(hostname).ogs"
	# Safetykey is currently read from input configuration file.. ugh this is so bad - need more secure method
	[ -z "${SAFETYKEY}" ] && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	[ -z "${SAFETYKEY}" ] && echo -e '\nEnter Safety Key' && grid-config_editconf ${GRID_CONFIG_TEMPLATE} && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	read -sp "👤  Please Enter Password for $(whoami)@$(hostname):  " password
	echo ${password} | openssl enc -aes-256-cbc -k "${SAFETYKEY}" -out "${SAFETYKEYFILE}" && unset password # vulnerable
	#password=$(openssl enc -aes-256-cbc -k "${SAFETYKEY}" -in "${SAFETYKEYFILE}" -d)
	echo '⚙️ ---> got creds'
}
# Define Function -
## Write default template to file
function grid-config_template(){
    # Create Configuration Directory & Template File if They Don't Exist
    [ ! -d "$(dirname ${GRID_CONFIG_TEMPLATE})" ] && mkdir -vp $(dirname ${GRID_CONFIG_TEMPLATE})
    [ ! -f "${GRID_CONFIG_TEMPLATE}" ] && cat <<-EOF > ${GRID_CONFIG_TEMPLATE}
GRID_ADMIN='sgeadmin'
GRID_COMPUTE_NODES=\'$(hostname)\'
GRID_CONFIG_TEMPLATE=${HOME}/.grid/.gconf_template
GRID_HOME='${HOME}/ogs_home'
GRID_MASTER_NODE=''
GRID_USER='sgeuser'
GRID_NODE_HOME='/Volumes/NFS/home/sgeuser/$(hostname)'
GRID_SSHFS_OPTS='defer_permissions,follow_symlinks,kernel_cache,reconnect,cipher=arcfour,cache=yes'
GRID_SSHKEY='ogs_rsa'
GRID_START=\'engine\'
GRID_STOP=\'engine\'
SAFETYKEY='safetypin'
SAFETYKEYFILE="${HOME}/.grid/.safety.$(hostname).ogs"
SGE_ROOT='/opt/ogs'
EOF
	# Load the default settings into environment and print them to screen for user to edit
	grid-config_loadvars ${GRID_CONFIG_TEMPLATE} && grid-config_check
	echo '⚙️ ---> created default template'
}
# Define Function
## Help
function grid-config_help(){
	help_text=$(cat <<-EOF
\n
Syntax : ${0##*/} [reset|(un/in)stall|superuser] [remexe|brew-(un/in)stall COMMAND] [file FILENAME]
\n\n
This program configures global variables for grid management.
\n\n
Local Options (executed only on localhost) ::
\n
\tload\t\t<FILE>\t    load a configuration file\n
\treset\t\t\t         delete local configuration file\n
\tconfig\t\t\t  populate local namespace\n
\tquiet\t\t\t  do not print config to screen or ask user to edit\n
\tcache-sudo\t\t  cache sudo password for auto-mount
\n\n
Compute Pool Options (executed on all worker nodes) ::
\n
\tinstall\t\t\t\t     install grid tools with git\n
\tuninstall\t\t\t      delete grid tools\n
\tkeychain\t\t\t start ssh-agent and add grid keys\n
\tbrew\t\t<PACKAGENAME>\t  install package with brew\n
\tunbrew\t\t<PACKAGENAME>\t   uninstall package with brew\n
\tremexe\t\t<COMMAND>\t   remote execution of command\n
\tintremexet\t<COMMAND>\t   remote execution of command with interactive ssh tty\n
\n
\n Print this message with >> ${0##*/} ?|-h|h|-help|help|--help
\n
EOF
)
echo -e ${help_text}
echo '⚙️ ---> helping hands'
}
# Parse Options
while :; do
    case ${1} in     
	'reset')	    
	    reset='reset'	   
	    ;;
	'info')	    
	    info='showinfoandexit'	   
	    ;;	    
	'quiet'|'q')
		quiet='bequiet!'
		;;
	'install')	    
	    GRID_INSTALL='install'	   
	    ;;	
	'uninstall')	    
	    GRID_INSTALL='uninstall'
	    ;;	
	'superuser')	    
	    USER_SUDO='superuserdo'	    
	    ;;
	'keychain')
	    START_KEYCHAIN='start_all_keychains'
	    ;;
	'cache-sudo')
	    CACHE_SUDO='savethepassword'	   
	    ;;
	'remexe')	    
	    if [ -n "${2}" ]; then		
		GRID_COMMAND=${2}		
		shift		
	    fi	    
	    ;;
	'intremexe')	    
	    if [ -n "${2}" ]; then		
		GRID_COMMAND=${2}		
		SSH_OPTS='-t'
		shift		
	    fi	    
	    ;;	    
	'user')	    
	    if [ -n "${2}" ]; then		
		USER=${2}		
		shift		
	    fi	    
	    ;;	    
	'config')
	    LOAD_CONFIG='yes'
	    ;;
	'brew')	    
	    if [ -n "${2}" ]; then		
		GRID_BREW=${2}		
		shift		
	    fi	    
	    ;;	
	'unbrew')
	    if [ -n "${2}" ]; then		
		GRID_UNBREW=${2}		
		shift		
	    fi	    
	    ;;	
	'load')    
	    if [ -n "${2}" ]; then		
		GRID_CONFIG_TEMPLATE=${2}		
		shift		
	    fi	    
	    ;;		   
	'?'|'-h'|'h'|'-help'|'help'|'--help')
	    grid-config_help
	    exit
	    ;;
	?*)
	    printf '\n ‼️ Warning: Unknown option: %s\n' "${1}" >&2
	    exit
	    ;;
	*)
	    break
    esac
    shift
done

# Execute configuration
grid-config

##
##
#
