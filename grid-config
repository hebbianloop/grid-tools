#!/bin/bash
#
# GRID-CONFIG
##
##	This program configures global variables for grid management.
##
##      TODO
##             -  check wifi/network connectivity?

# Set default values for global variables

GRID_CONFIG_TEMPLATE=${HOME}/.grid/.gconf_template

# Define Function
## Help
function grid-agent_help(){
	help_text=$(cat <<-EOF
\n
Syntax : ${0##*/} [reset|(un/in)stall|superuser] [grid-command|brew-(un/in)stall COMMAND] [file FILENAME]
\n\n
This program configures global variables for grid management.
\n\n
-- Options ::
\n
\treset         delete local configuration file\n
\tfile          load/create new configuration file

The following commands are executed on every node defined in configuration file ::
\tinstall        install grid tools\n
\tuninstall      remove grid tools\n
\tbrew-install   install package\n
\tbrew-uninstall uninstall package\n
\tgrid-command   remote execution of command\n
\tstart-keychain start ssh-agent\n
\tload-config    load a configuration file
\n
EOF
)
echo -e ${help_text}
}
# Define Function
## Print Current Configuration to Screen and Ask User for Modifications
function grid-config(){
    # Cache the sudoer password on all compute nodes
    [ ! -z "${cache_sudo}" ] && grid-config_getuserpw && return
    # Check for existing configuration files
    grid-config_check
    # Run a brew install/uninstall on list of remote hosts
    [ ! -z "${GRID_BREW}" ] || [ ! -z "${GRID_UNBREW}" ] && grid-config_brew
    # Install grid-tools on all compute nodes
    [ ! -z "${GRID_INSTALL}" ] && grid-config_install-tools
    # Execute remote command on all compute nodes
    [ ! -z "${GRID_COMMAND}" ] && grid-config_ssh-exe
    # Load variables into namespace
    [ ! -z "${load_config}" ] && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
    # Start keychain app on all compute nodes
    [ ! -z "${start_keychain}" ] && grid-config_startkeychain
}
# Define Function
## Check for existence of configuration file
function grid-config_check(){
    # Check for File Reset
    [ -f "${GRID_CONFIG_TEMPLATE}" ] && [ ! -z "${reset}" ] && rm -v ${GRID_CONFIG_TEMPLATE}
    # Read existing Configuration File and load into namespace
    if [ -f "${GRID_CONFIG_TEMPLATE}" ]; then
	echo 'Global Configuration for Grid Services'
	# print configuration to screen
	echo "$(cat $GRID_CONFIG_TEMPLATE)"  
	read -p "[A]ccept/[E]dit Settings?  " proceed
	if [ "${proceed}" = 'E' ] || [ "${proceed}" = 'Edit' ] || [ "${proceed}" = 'e' ]; then
	    grid-config_editconf ${GRID_CONFIG_TEMPLATE} && grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	else
	    grid-config_loadvars ${GRID_CONFIG_TEMPLATE}
	fi
    fi
    # Populate namespace if config template variable is not defined
    [ ! -f "${GRID_CONFIG_TEMPLATE}" ] && grid-config_template
}
# Define Function
## Populate namespace
function grid-config_loadvars(){
    local file=${1}
    while read var; do
	eval ${var}
    done < ${file}
}
# Define Function
## Retrieve User Input
##	--  why don't you just open the config file with emacs or text editor? (some people may not know how to use?)
function grid-config_editconf(){
    local file=${1}
    emacs ${file}
}
# Define Function
## Brew install
function grid-config_brew(){
	for host in ${GRID_COMPUTE_NODES}; do
		echo '🖥  Brewing:  '${GRID_ADMIN}'@'${host}
		[ ! -z "${GRID_BREW}" ] && ssh ${GRID_ADMIN}'@'${host} 'export PATH=$PATH:/usr/local/bin; [ -z "$(which brew)" ] && ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; brew install '${GRID_BREW}
		[ ! -z "${GRID_UNBREW}" ] && ssh ${GRID_ADMIN}'@'${host} 'export PATH=$PATH:/usr/local/bin; brew uninstall '${GRID_UNBREW}
	done
}
# Define Function
## Install grid-tools and add to path
function grid-config_install-tools(){
    for host in ${GRID_COMPUTE_NODES}; do
	[ "${GRID_INSTALL}" = "install" ] && echo '🛠 🖥  Installing Grid Tools:  '${GRID_USER}'@'${host} && ssh ${GRID_USER}'@'${host} 'export PATH=$PATH:/usr/local/bin; source ${HOME}/.bash_profile; [ ! -d ${HOME}/grid-tools ] && networksetup -setairportpower en1 on; git clone http://github.com/seldamat/grid-tools.git ${HOME}/grid-tools; [ -d ${HOME}/grid-tools ] && cd ${HOME}/grid-tools && git pull; checkpath=$(echo ${PATH} | grep -o ${HOME}/grid-tools); [ -z ${checkpath} ] && echo -e "\n#Add Grid Tools to Path\n export PATH=${PATH}:${HOME}/grid-tools\n" >> ${HOME}/.bash_profile; exit'
	[ "${GRID_INSTALL}" = "uninstall" ] && echo '🛠 🖥  Uninstalling Grid Tools:  '${GRID_USER}'@'${host} && ssh ${GRID_USER}'@'${host} '[ -d ${HOME}/grid-tools ] && rm -rv ${HOME}/grid-tools; exit'
    done
    echo ''
}
# Define Function
## Start keychain
function grid-config_startkeychain(){
    GRID_COMMAND='eval `keychain --agents ssh --eval ogs_rsa`' && grid-config_ssh-exe
}
# Define Function
## Execute same command on all hosts on grid
function grid-config_ssh-exe(){
    for host in ${GRID_COMPUTE_NODES}; do
	echo -e "\n📡  Executing Remote Command on ${GRID_USER}@${host}:${GRID_COMMAND}"
	[ -z "${USER_SUDO}" ] && ssh ${GRID_USER}'@'${host} "${GRID_COMMAND}"
	[ ! -z "${USER_SUDO}" ] && grid-config_getuserpw ${GRID_USER} ${host} && ssh ${GRID_USER}'@'${host} "openssl enc -aes-256-cbc -k "${SAFETYKEY}" -in "${SAFETYKEYFILE}" -d | sudo -S ${GRID_COMMAND}"
    done
}
# Define Function
## Securely store passwords on remote host for non-interactive sudo shell (i.e. via ssh without -t but with sudo commands)
function grid-config_getuserpw(){
	# password is stored in encrypted file with random cipher - global variable: SAFETYKEY, this is used to decrypt below
	SAFETYKEYFILE="${HOME}/.ssh/.safety.$(hostname).ogs" && SAFETYKEY='SAlTed-'$RANDOM'-safety'
	read -sp "👤  Please Enter Password for $(whoami)@$(hostname):  " password
	echo ${password} | openssl enc -aes-256-cbc -k "${SAFETYKEY}" -out "${SAFETYKEYFILE}" && unset password # vulnerable
	#password=$(openssl enc -aes-256-cbc -k "${SAFETYKEY}" -in "${SAFETYKEYFILE}" -d)
}
# Define Function -
## Write default template to file
function grid-config_template(){
    # Create Configuration Directory & Template File if They Don't Exist
    [ ! -d "$(dirname ${GRID_CONFIG_TEMPLATE})" ] && mkdir -vp $(dirname ${GRID_CONFIG_TEMPLATE})
    [ ! -f "${GRID_CONFIG_TEMPLATE}" ] && cat <<-EOF > ${GRID_CONFIG_TEMPLATE}
GRID_ADMIN='sgeadmin'
GRID_COMPUTE_NODES=''
GRID_CONFIG_TEMPLATE=${HOME}'/.grid/.gconf_template'
GRID_HOME='${HOME}/ogs_home'
GRID_MASTER_NODE=''
GRID_USER='sgeuser'
GRID_NODE_HOME='/Volumes/CFMI-CFS/home/'${GRID_USER}'/$(hostname)'
GRID_SSHFS_OPTS='defer_permissions,follow_symlinks,kernel_cache,reconnect,cipher=arcfour,cache=yes'
GRID_SSHKEY='ogs_rsa'
GRID_START='engine'
GRID_STOP='engine'
SAFETYKEY=''
SGE_ROOT='/opt/ogs'
EOF
    grid-config_check
}
# Parse Options
while :; do
    case ${1} in     
	'reset')	    
	    reset='reset'	   
	    ;;	
	'install')	    
	    GRID_INSTALL='install'	   
	    ;;	
	'uninstall')	    
	    GRID_INSTALL='uninstall'
	    ;;	
	'superuser')	    
	    USER_SUDO='superuserdo'	    
	    ;;
	'start-all-keychains')
	    start_keychain='start_all_keychains'
	    ;;
	'cache-sudo')
	    cache_sudo='savethepassword'	   
	    ;;
	'grid-command')	    
	    if [ -n "${2}" ]; then		
		GRID_COMMAND=${2}		
		shift		
	    fi	    
	    ;;
	'load-config')
	    load_config='yes'
	    ;;
	'brew-install')	    
	    if [ -n "${2}" ]; then		
		GRID_BREW=${2}		
		shift		
	    fi	    
	    ;;	
	'brew-uninstall')
	    if [ -n "${2}" ]; then		
		GRID_UNBREW=${2}		
		shift		
	    fi	    
	    ;;	
	'GRID_CONFIG_TEMPLATE')    
	    if [ -n "${2}" ]; then		
		GRID_CONFIG_TEMPLATE=${2}		
		shift		
	    fi	    
	    ;;
	'user')
	    if [ -n "${2}" ]; then
		user=${2}
		shift
	    fi
	    ;;
	'host')
	    if [ -n "${2}" ]; then
		host=${2}
		shift
	    fi
	    ;;		   
	'?'|'-h'|'h'|'-help'|'help'|'--help')
	    grid-agent_help
	    exit
	    ;;
	?*)
	    printf '\n ‼️ Warning: Unknown option: %s\n' "${1}" >&2
	    exit
	    ;;
	*)
	    break
    esac
    shift
done

# Execute configuration
grid-config

##
##
#
